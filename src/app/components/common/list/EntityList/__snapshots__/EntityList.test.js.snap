// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EntityList renders correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "white",
    }
  }
>
  <RCTScrollView
    closeOnRowBeginSwipe={false}
    closeOnRowPress={true}
    closeOnScroll={true}
    dataSource={
      ListViewDataSource {
        "items": 1,
      }
    }
    directionalDistanceChangeThreshold={2}
    disableLeftSwipe={false}
    disableRightSwipe={false}
    enableEmptySections={true}
    leftOpenValue={0}
    onScroll={[Function]}
    previewFirstRow={false}
    recalculateHiddenLayout={false}
    renderFooter={[Function]}
    renderHeader={[Function]}
    renderHiddenRow={[Function]}
    renderRow={[Function]}
    renderScrollComponent={[Function]}
    renderSeparator={[Function]}
    rightOpenValue={-80}
    swipeToOpenPercent={50}
  >
    <View>
      <View
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "#C1C1C1",
            "flex": 1,
            "flexDirection": "row",
            "padding": 8,
          }
        }
      >
        <TextInput
          onChangeText={[Function]}
          placeholder="Search..."
          style={
            Object {
              "backgroundColor": "white",
              "borderRadius": 2,
              "flex": 1,
              "fontSize": 15,
              "height": 40,
              "paddingHorizontal": 8,
            }
          }
          value=""
        />
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          hitSlop={undefined}
          isTVSelectable={true}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "opacity": 1,
              "padding": 5,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={false}
            ellipsizeMode="tail"
            style={
              Array [
                Object {
                  "color": undefined,
                  "fontSize": 24,
                },
                undefined,
                Object {
                  "fontFamily": "EvilIcons",
                  "fontStyle": "normal",
                  "fontWeight": "normal",
                },
              ]
            }
          >
            ï„ 
          </Text>
        </View>
      </View>
      <View
        style={Object {}}
      >
        <View
          style={
            Array [
              Object {
                "bottom": 0,
                "left": 0,
                "overflow": "hidden",
                "position": "absolute",
                "right": 0,
                "top": 0,
              },
              Object {
                "height": 0,
                "width": 0,
              },
            ]
          }
        >
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                },
                Object {
                  "alignSelf": "flex-end",
                  "backgroundColor": "red",
                  "height": 50,
                  "padding": 10,
                  "width": 80,
                },
              ]
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <View>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={
                  Object {
                    "color": "white",
                    "fontSize": 18,
                  }
                }
              >
                Delete
              </Text>
            </View>
          </View>
        </View>
        <View
          onLayout={[Function]}
          onMoveShouldSetResponder={[Function]}
          onMoveShouldSetResponderCapture={[Function]}
          onResponderEnd={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderReject={[Function]}
          onResponderRelease={[Function]}
          onResponderStart={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          onStartShouldSetResponderCapture={[Function]}
          style={
            Object {
              "transform": Array [
                Object {
                  "translateX": 0,
                },
              ],
            }
          }
        >
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            hitSlop={undefined}
            isTVSelectable={true}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            style={
              Object {
                "opacity": 1,
              }
            }
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
            >
              1
               
              name 1
            </Text>
          </View>
        </View>
      </View>
      <View
        style={
          Object {
            "height": 85,
          }
        }
      />
    </View>
  </RCTScrollView>
</View>
`;
